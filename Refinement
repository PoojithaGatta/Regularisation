import cv2
import numpy as np
import svgwrite
from svgpathtools import svg2paths, parse_path
from lxml import etree
import matplotlib.pyplot as plt
from svgpathtools import Line, CubicBezier, QuadraticBezier, Arc

def load_svg(file_path):
    """Load SVG file and extract paths."""
    paths, attributes = svg2paths(file_path)
    return paths, attributes

def svg_path_to_contours(file_path):
    """Convert SVG path data to contours using OpenCV."""
    # Load SVG file and parse the XML
    tree = etree.parse(file_path)
    root = tree.getroot()

    # Get the width and height of the SVG
    width = height = 1024  # default values
    if 'width' in root.attrib and 'height' in root.attrib:
        width = float(root.attrib['width'])
        height = float(root.attrib['height'])
    elif 'viewBox' in root.attrib:
        viewBox = root.attrib['viewBox'].split()
        width = float(viewBox[2])
        height = float(viewBox[3])

    # Create a blank image with a white background
    img = np.ones((int(height), int(width)), np.uint8) * 255

    def draw_path(path_data):
        """Draw individual path onto the image with smooth curves."""
        # Initialize an array to collect points for drawing
        points = []
        
        for segment in path_data:
            if isinstance(segment, Line):
                points.extend([(segment.start.real, segment.start.imag), (segment.end.real, segment.end.imag)])
            elif isinstance(segment, CubicBezier):
                # Sample points along the cubic bezier curve
                for t in np.linspace(0, 1, num=100):
                    pt = segment.point(t)
                    points.append((pt.real, pt.imag))
            elif isinstance(segment, QuadraticBezier):
                # Sample points along the quadratic bezier curve
                for t in np.linspace(0, 1, num=100):
                    pt = segment.point(t)
                    points.append((pt.real, pt.imag))
            elif isinstance(segment, Arc):
                # Approximate the arc with line segments
                num_segments = 100
                for i in range(num_segments):
                    t = i / (num_segments - 1)
                    pt = segment.point(t)
                    points.append((pt.real, pt.imag))

        # Convert points to an array and draw
        points = np.array(points, np.int32)
        if len(points) > 1:
            cv2.polylines(img, [points], isClosed=False, color=(0, 0, 0), thickness=1)

    # Iterate over all SVG elements
    for element in root.iter('{http://www.w3.org/2000/svg}path'):
        d = element.attrib['d']
        path_data = parse_path(d)
        draw_path(path_data)

    # Detect contours in the image
    contours, _ = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Smooth the contours
    img_smooth = cv2.GaussianBlur(img, (5, 5), 0)
    contours, _ = cv2.findContours(img_smooth, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    return contours, img

def is_circle(contour):
    """Determine if a contour is approximately a circle."""
    perimeter = cv2.arcLength(contour, True)
    area = cv2.contourArea(contour)
    if perimeter == 0 or area == 0:
        return False
    
    circularity = 4 * np.pi * (area / (perimeter * perimeter))
    
    if 0.8 < circularity < 1.2:
        x, y, w, h = cv2.boundingRect(contour)
        aspect_ratio = float(w) / h
        if 0.9 < aspect_ratio < 1.1:
            epsilon = 0.01 * perimeter
            approx = cv2.approxPolyDP(contour, epsilon, True)
            if len(approx) > 8:  # Ensuring the contour has enough vertices
                return True
    return False

def approximate_shapes(contours):
    """Approximate hand-drawn shapes to perfect geometric shapes."""
    approximations = []
    for contour in contours:
        if is_circle(contour):
            (x, y), radius = cv2.minEnclosingCircle(contour)
            center = (int(x), int(y))
            radius = int(radius)
            approximations.append(('circle', center, radius))
        else:
            epsilon = 0.02 * cv2.arcLength(contour, True)
            approx = cv2.approxPolyDP(contour, epsilon, True)
            approximations.append(('polygon', approx))
    return approximations

def draw_svg(approximations, file_name):
    """Draw the approximated shapes into a new SVG file."""
    dwg = svgwrite.Drawing(file_name, profile='tiny')
    for shape in approximations:
        if shape[0] == 'circle':
            _, center, radius = shape
            dwg.add(dwg.circle(center=center, r=radius, stroke='black', fill='none'))
        else:
            _, points = shape
            points = [(float(point[0][0]), float(point[0][1])) for point in points]
            dwg.add(dwg.polygon(points, stroke='black', fill='none'))
    dwg.save()

# Load the SVG files
paths, attributes = load_svg('frag2.svg')

# Convert SVG path data to contours
contours, img = svg_path_to_contours('frag2.svg')

# Approximate the hand-drawn shapes
approximations = approximate_shapes(contours)

# Draw the new SVG with approximated shapes
draw_svg(approximations, 'frag2_sol.svg') 

# Display the final image with a white background
plt.imshow(img, cmap='gray')
plt.title('Processed Image with Contours')
plt.axis('off')
plt.show()
