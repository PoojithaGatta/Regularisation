import cv2
import numpy as np
import svgwrite
from svgpathtools import svg2paths, parse_path
from lxml import etree

def load_svg(file_path):
    """Load SVG file and extract paths."""
    paths, attributes = svg2paths(file_path)
    return paths, attributes

def svg_path_to_contours(file_path):
    """Convert SVG path data to contours using OpenCV."""
    # Load SVG file and parse the XML
    tree = etree.parse(file_path)
    root = tree.getroot()

    # Get the width and height of the SVG
    width = height = 1024  # default values
    if 'width' in root.attrib and 'height' in root.attrib:
        width = float(root.attrib['width'])
        height = float(root.attrib['height'])
    elif 'viewBox' in root.attrib:
        viewBox = root.attrib['viewBox'].split()
        width = float(viewBox[2])
        height = float(viewBox[3])

    # Create a blank image
    img = np.zeros((int(height), int(width)), np.uint8)

    # Draw paths onto the image
    for element in root.iter('{http://www.w3.org/2000/svg}path'):
        d = element.attrib['d']
        path = parse_path(d)
        points = [(segment.start.real, segment.start.imag) for segment in path]
        points = np.array(points, np.int32).reshape((-1, 1, 2))
        cv2.polylines(img, [points], isClosed=True, color=(255, 255, 255), thickness=1)

    # Detect contours in the image
    contours, _ = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    return contours

def is_circle(contour):
    """Determine if a contour is approximately a circle."""
    perimeter = cv2.arcLength(contour, True)
    area = cv2.contourArea(contour)
    if perimeter == 0 or area == 0:
        return False

    circularity = 4 * np.pi * (area / (perimeter * perimeter))

    if 0.8 < circularity < 1.2:
        x, y, w, h = cv2.boundingRect(contour)
        aspect_ratio = float(w) / h
        if 0.9 < aspect_ratio < 1.1:
            epsilon = 0.01 * perimeter
            approx = cv2.approxPolyDP(contour, epsilon, True)
            if len(approx) > 8:  # Ensuring the contour has enough vertices
                return True
    return False

def approximate_shapes(contours):
    """Approximate hand-drawn shapes to perfect geometric shapes."""
    approximations = []
    for contour in contours:
        if is_circle(contour):
            (x, y), radius = cv2.minEnclosingCircle(contour)
            center = (int(x), int(y))
            radius = int(radius)
            approximations.append(('circle', center, radius))
        else:
            epsilon = 0.02 * cv2.arcLength(contour, True)
            approx = cv2.approxPolyDP(contour, epsilon, True)
            approximations.append(('polygon', approx))
    return approximations

def draw_svg(approximations, file_name):
    """Draw the approximated shapes into a new SVG file."""
    dwg = svgwrite.Drawing(file_name, profile='tiny')
    for shape in approximations:
        if shape[0] == 'circle':
            _, center, radius = shape
            dwg.add(dwg.circle(center=center, r=radius, stroke='black', fill='none'))
        else:
            _, points = shape
            points = [(float(point[0][0]), float(point[0][1])) for point in points]
            dwg.add(dwg.polygon(points, stroke='black', fill='none'))
    dwg.save()

# Load the SVG files
paths, attributes = load_svg('isolated.svg')

# Convert SVG path data to contours
contours = svg_path_to_contours('isolated.svg')

# Approximate the hand-drawn shapes
approximations = approximate_shapes(contours)

# Draw the new SVG with approximated shapes
draw_svg(approximations, 'isolated_sol.svg')
